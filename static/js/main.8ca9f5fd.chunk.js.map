{"version":3,"sources":["router/About.tsx","components/Movie.tsx","router/Home.tsx","components/Navigation.tsx","components/Detail.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["About","className","Movie","id","year","title","summary","poster","genres","to","pathname","state","src","alt","map","genre","index","key","slice","Home","useState","isLoading","setIsLoading","movies","setMovies","useEffect","a","async","axios","get","then","res","data","movie","medium_cover_image","Navigation","Detail","props","location","useLocation","history","useHistory","console","log","undefined","push","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4TAceA,G,MAZD,WACZ,OACE,yBAAKC,UAAU,oBACb,8IAIA,+D,kDC6CSC,G,MAxCgB,SAAC,GAOzB,IANLC,EAMI,EANJA,GACAC,EAKI,EALJA,KACAC,EAII,EAJJA,MACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,OACAC,EACI,EADJA,OAEA,OACE,yBAAKP,UAAU,SACb,kBAAC,IAAD,CACEQ,GAAI,CACFC,SAAS,UAAD,OAAYP,GACpBQ,MAAO,CACLP,OACAC,QACAC,UACAC,SACAC,YAIJ,yBAAKI,IAAKL,EAAQM,IAAKR,EAAOA,MAAOA,IACrC,yBAAKJ,UAAU,eACb,wBAAIA,UAAU,gBAAgBI,GAC9B,wBAAIJ,UAAU,eAAeG,GAC7B,wBAAIH,UAAU,iBACXO,EAAOM,KAAI,SAACC,EAAOC,GAAR,OACV,wBAAIC,IAAKD,EAAOf,UAAU,iBACvBc,OAIP,uBAAGd,UAAU,kBAAkBK,EAAQY,MAAM,EAAG,KAAhD,YCQKC,EA1CQ,WAAO,IAAD,EACOC,oBAAS,GADhB,mBACpBC,EADoB,KACTC,EADS,OAECF,mBAAS,IAFV,mBAEpBG,EAFoB,KAEZC,EAFY,KAiB3B,OAbAC,qBAAU,WACU,EAAAC,EAAAC,OAAA,kEAAAD,EAAA,MACVE,IACHC,IAAI,yDACJC,MAAK,SAAAC,GACJ,IAAMC,EAAOD,EAAIC,KAAKA,KAAKT,OAC3BC,EAAUQ,GACVV,GAAa,OAND,uCAUjB,IAGD,6BAASrB,UAAU,aAChBoB,EACC,yBAAKpB,UAAU,UACb,0BAAMA,UAAU,gBAAhB,wBAGF,yBAAKA,UAAU,UACZsB,EAAOT,KAAI,SAACmB,GAAD,OACV,kBAAC,EAAD,CACEhB,IAAKgB,EAAM9B,GACXA,GAAI8B,EAAM9B,GACVC,KAAM6B,EAAM7B,KACZC,MAAO4B,EAAM5B,MACbC,QAAS2B,EAAM3B,QACfC,OAAQ0B,EAAMC,mBACd1B,OAAQyB,EAAMzB,eChCb2B,G,MAVI,WACjB,OACE,yBAAKlC,UAAU,OACb,kBAAC,IAAD,CAAMQ,GAAG,KAAT,QACA,kBAAC,IAAD,CAAMA,GAAG,UAAT,SACA,kBAAC,IAAD,CAAMA,GAAG,cAAT,aCmBS2B,EAfA,SAACC,GACd,IAAMC,EAAWC,cACXC,EAAUC,cAChBC,QAAQC,IAAIN,GACZZ,qBAAU,gBACemB,IAAnBN,EAAS3B,OACX6B,EAAQK,KAAK,OAEd,IAEH,IAAMxC,EAAQiC,EAAS3B,MAAQ,8BAAO2B,EAAS3B,MAAMN,OAAgB,KAErE,OAAO,6BAAMA,ICCAyC,EAXO,WACpB,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAO,EAAMC,UAAW9B,IACxC,kBAAC,IAAD,CAAO4B,KAAK,SAASE,UAAWjD,IAChC,kBAAC,IAAD,CAAO+C,KAAK,aAAaE,UAAWb,MCTtBc,QACW,cAA7BC,OAAOb,SAASc,UAEe,UAA7BD,OAAOb,SAASc,UAEhBD,OAAOb,SAASc,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDkI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.8ca9f5fd.chunk.js","sourcesContent":["import React from 'react';\nimport './About.css';\nconst About = () => {\n  return (\n    <div className=\"about__container\">\n      <span>\n        “Freedom is the freedom to say that two plus two make four. If that is\n        granted, all else follows.”\n      </span>\n      <span>− George Orwell, 1984</span>\n    </div>\n  );\n};\n\nexport default About;\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Movie.css';\n\ntype Props = {\n  id?: number;\n  key?: number;\n  year: number;\n  title: string;\n  summary: string;\n  poster: string;\n  genres: Array<string>;\n};\nconst Movie: React.FC<Props> = ({\n  id,\n  year,\n  title,\n  summary,\n  poster,\n  genres,\n}) => {\n  return (\n    <div className=\"movie\">\n      <Link\n        to={{\n          pathname: `/movie/${id}`,\n          state: {\n            year,\n            title,\n            summary,\n            poster,\n            genres,\n          },\n        }}\n      >\n        <img src={poster} alt={title} title={title} />\n        <div className=\"movie__data\">\n          <h3 className=\"movie__title\">{title}</h3>\n          <h5 className=\"movie__year\">{year}</h5>\n          <ul className=\"movie__genres\">\n            {genres.map((genre, index) => (\n              <li key={index} className=\"genres__genre\">\n                {genre}\n              </li>\n            ))}\n          </ul>\n          <p className=\"movie__summary\">{summary.slice(0, 180)}...</p>\n        </div>\n      </Link>\n    </div>\n  );\n};\n\nexport default Movie;\n","import React, { useState, useEffect } from 'react';\nimport './Home.css';\nimport axios from 'axios';\nimport Movie from '../components/Movie';\n\ntype Props = {\n  id: number;\n  year: number;\n  title: string;\n  summary: string;\n  medium_cover_image: string;\n  genres: Array<string>;\n};\nconst Home: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [movies, setMovies] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await axios\n        .get('https://yts.lt/api/v2/list_movies.json?sort_by=rating')\n        .then(res => {\n          const data = res.data.data.movies;\n          setMovies(data);\n          setIsLoading(false);\n        });\n    };\n    fetchData();\n  }, []);\n\n  return (\n    <section className=\"container\">\n      {isLoading ? (\n        <div className=\"loader\">\n          <span className=\"loader__text\">List is loading... </span>\n        </div>\n      ) : (\n        <div className=\"movies\">\n          {movies.map((movie: Props) => (\n            <Movie\n              key={movie.id}\n              id={movie.id}\n              year={movie.year}\n              title={movie.title}\n              summary={movie.summary}\n              poster={movie.medium_cover_image}\n              genres={movie.genres}\n            />\n          ))}\n        </div>\n      )}\n    </section>\n  );\n};\n\nexport default Home;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Navigation.css';\n\nconst Navigation = () => {\n  return (\n    <div className=\"nav\">\n      <Link to=\"/\">Home</Link>\n      <Link to=\"/about\">About</Link>\n      <Link to=\"/movie/:id\">Detail</Link>\n    </div>\n  );\n};\n\nexport default Navigation;\n","import React, { useEffect } from 'react';\nimport { useLocation, useHistory } from 'react-router-dom';\n\ntype Props = {\n  id?: number;\n  key?: number;\n  year: number;\n  title: string;\n  summary: string;\n  poster: string;\n  genres: Array<string>;\n};\n\nconst Detail = (props: Props) => {\n  const location = useLocation<{ title: string } | null>();\n  const history = useHistory();\n  console.log(props);\n  useEffect(() => {\n    if (location.state === undefined) {\n      history.push('/');\n    }\n  }, []);\n\n  const title = location.state ? <span>{location.state.title}</span> : null;\n\n  return <div>{title}</div>;\n};\n\nexport default Detail;\n","import React from 'react';\nimport { Route, HashRouter } from 'react-router-dom';\nimport About from './router/About';\nimport Home from './router/Home';\nimport Navigation from './components/Navigation';\nimport Detail from './components/Detail';\n\ntype Props = {\n  id: number;\n  year: number;\n  title: string;\n  summary: string;\n  medium_cover_image: string;\n  genres: Array<string>;\n};\nconst App: React.FC = () => {\n  return (\n    <HashRouter>\n      <Navigation />\n      <Route path=\"/\" exact={true} component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/movie/:id\" component={Detail} />\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}